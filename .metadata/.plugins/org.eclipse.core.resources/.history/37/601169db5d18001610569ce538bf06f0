import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class Server {

	private ServerSocket socket;
	private Socket accsocket;
	private int PORT = 8080;
	private InputStream input;
	private OutputStream output;
	private DataInputStream datainput;
	private DataOutputStream dataoutput;

	java.sql.Statement st = null;
	ResultSet rs = null;
	Connection con = null;

	public void ServerStart() throws SQLException	//jdbc를 통해 mysql과 연동하고 서버를 오픈함
	{
		try{
			try
			{
				con = DriverManager.getConnection(
						"jdbc:mysql://localhost", "root", "1234");
			}
			catch(SQLException ex)
			{
				System.out.println("SQL 연결 실패!\n");
				return;
			}

			st = con.createStatement();
			rs = st.executeQuery("USE COMPANY");

			if(st.execute("show tables"))
				rs = st.getResultSet();

			while(rs.next())
			{
				System.out.println(rs.getNString(1));
			}
			
			System.out.println("------------------------------");

			socket = new ServerSocket(PORT);
			if(socket != null)
			{
				System.out.println("Server opened\n");
				Connect();
			}

		}
		catch(IOException ex)
		{
			System.out.println("SOCKET ERROR\n");
		}
		catch (SQLException e)
		{
			System.out.println("SQL ERROR\n");
		}
		catch (Exception eee){}
	}

	private void Connect() throws SQLException	
	//ServerStart 메소드 안에서 쓰레드로 Client를 accept 해주는 메소드
	{
		Thread thread = new Thread(new Runnable(){
			public void run()
			{
				while(true)
				{
					try{
						accsocket = socket.accept();	//클라이언트 접속까지 대기
						System.out.println("User Connected\n"); //접속되면 메세지 출력

						input = accsocket.getInputStream()
						datainput = new DataInputStream(input);

						output = accsocket.getOutputStream();
						dataoutput = new DataOutputStream(output); //통신할 스트림 할당

						Receive();
					}
					catch(IOException ex)	//IO 예외 발생시 에러메시지 출력
					{
						System.out.println("ACCEPT ERROR\n");
					}
					catch (SQLException ex)	//SQL 관련 오류 발생시 에러메세지 출력
					{
						System.out.println("SQL ERROR\n");
					}
				}
			}
		});

		thread.start();
	}

	private String[] ProcessString(String msg)
	{//클라이언트에서 보낸 문자열을 질의로 처리하기 위해 공백이나 문자를 제거하는 메소드
		String[] sp = msg.split("', '");	//', '로 나누었을 때
		if(sp.length == 3)	//string 덩어리가 3개가 나오면 질의 a
		{
			sp[0] = sp[0].substring(1);
			sp[2] = sp[2].substring(0, sp[2].length()-1);	//' 제거
			
			String[] dno = sp[0].split(" ");
			String[] hour = sp[1].split(" ");
			String[] pname = sp[2].split(" ");	//공백을 기준으로 문자열 나눔
			
			sp[0] = dno[1];	//ex)department 5를 dno[0] = "department", dno[1] = "5"로 나눴으니
							//질의에 필요한 값인 5를 return하기 위해 할당
			sp[1] = hour[0]; //ex)10 Hours를 dno[0] = "10", dno[1] = "Hours"로 나눴으니
							 //질의에 필요한 값인 10을 return하기 위해 할당
			sp[2] = pname[0] + pname[1];	//ex)Product X를 둘로 나누고 하나로 합쳐서 중간의 공백 제거
		}
		else if(sp.length == 1)
		{
			sp = sp[0].split(" ");
			if(sp.length == 1 && sp[0].compareTo("QueryB") == 0)
			{//
				return sp;
			}
			else
			{
				sp[0] = sp[0].substring(1, sp[0].length());
				sp[1] = sp[1].substring(0, sp[1].length()-1);
			}
		}
		else{}
				
		return sp;
	}
	
	private void Receive() throws SQLException
	{
		Thread thread = new Thread(new Runnable(){
			public void run(){
				while(true)
				{
					try{
						String sendstring = "";
						String msg = datainput.readUTF();
						System.out.println(msg + "\n-----------------------==Result");
						
						String[] sp = ProcessString(msg);
						
						if(sp.length == 3)
						{
							PreparedStatement p = con.prepareStatement("select distinct Fname, Lname from employee, works_on, project where (Ssn = Essn) AND (Pnumber = Pno) AND (Dnum = ?) AND (Hours >= ?) AND (Pname = ?)");
							p.clearParameters();
							p.setInt(1, Integer.parseInt(sp[0]));
							p.setInt(2, Integer.parseInt(sp[1]));
							p.setString(3, sp[2]);
							
							rs = p.executeQuery();
							
							while(rs.next())
							{
								String Fname, Lname;
								Fname = rs.getString(1);
								Lname = rs.getString(2);
								sendstring = sendstring + Fname + " " + Lname + "\n";
								
								System.out.println(Fname + " " + Lname);
							}
							if(sendstring.compareTo("") == 0)
								System.out.println("Empty Set");
							
							Send_Result(sendstring);
						}
						else if(sp.length == 2)
						{
							PreparedStatement p = con.prepareStatement("select Fname, Lname from employee e where e.Super_ssn = (select Ssn from employee s where s.Fname = ? AND s.Lname = ?)");
							p.clearParameters();
							p.setString(1, sp[0]);
							p.setString(2, sp[1]);
							
							rs = p.executeQuery();
							
							while(rs.next())
							{
								String Fname, Lname;
								Fname = rs.getString(1);
								Lname = rs.getString(2);
								sendstring = sendstring + Fname + " " + Lname + "\n";
								
								System.out.println(Fname + " " + Lname);
							}
							
							
							if(sendstring.compareTo("") == 0)
								System.out.println("Empty Set");
							
							Send_Result(sendstring);
						}
						else if(sp.length == 1 && sp[0].compareTo("QueryB") == 0)//Query B 요청일 경우
						{
							PreparedStatement p = con.prepareStatement("SELECT Fname, Lname FROM EMPLOYEE, DEPENDENT\nWHERE Ssn = Essn AND Fname = Dependent_name");
							rs = p.executeQuery();
							
							while(rs.next())
							{
								String Fname, Lname;
								Fname = rs.getString(1);
								Lname = rs.getString(2);
								sendstring = sendstring + Fname + " " + Lname + "\n";
								
								System.out.println(Fname + " " + Lname);
							}
							if(sendstring.compareTo("") == 0)
								System.out.println("Empty Set");
							
							Send_Result(sendstring);
						}
					}
					catch (IOException ex)
					{
						try{
							datainput.close();
							dataoutput.close();
							accsocket.close();
							break;
						}
						catch (Exception e){}
					}
					catch (SQLException e)
					{
						System.out.println("SQL ERROR\n\n");
					}
				}
			}
		});

		thread.start();
	}

	private void Send_Result(String str)
	{
		try{
			dataoutput.writeUTF(str);
		}
		catch(IOException e)
		{
			System.out.println("Query Send ERROR\n");
		}
	}
}
